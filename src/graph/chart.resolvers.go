package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"errors"
	"time"

	"github.com/patostickar/go-server-data-viz/src/config"
	gqlmodel "github.com/patostickar/go-server-data-viz/src/graph/model"
	t "github.com/patostickar/go-server-data-viz/src/graph/transformer"
	"github.com/patostickar/go-server-data-viz/src/models"
	"github.com/patostickar/go-server-data-viz/src/service"
)

// UpdateSettings is the resolver for the updateSettings field.
func (r *mutationResolver) UpdateSettings(_ context.Context, settings gqlmodel.SettingsInput) (*gqlmodel.Settings, error) {
	if int(*settings.NumPlotsPerChart) < 1 || int(*settings.NumPlotsPerChart) > 100 {
		return nil, errors.New("NumPlots must be between 1 and 100")
	}

	if int(*settings.NumPoints) < 10 || int(*settings.NumPoints) > 1_000_000 {
		return nil, errors.New("NumPlots must be between 10 and 1,000,000")
	}

	r.s.SetSettings(service.PlotSettings{
		NumPlots:     int(*settings.NumPlotsPerChart),
		NumPoints:    int(*settings.NumPoints),
		PollInterval: int(*settings.PollInterval),
	})

	return &gqlmodel.Settings{
		NumPlotsPerChart: *settings.NumPlotsPerChart,
		NumPoints:        *settings.NumPoints,
		PollInterval:     *settings.PollInterval,
	}, nil
}

// GetCharts is the resolver for the getCharts field.
func (r *queryResolver) GetCharts(_ context.Context) (*gqlmodel.ChartDataTimestamp, error) {
	charts, err := r.s.Store.Read(config.ChartsKey)
	if err != nil {
		return nil, err
	}

	var chartData []*gqlmodel.ChartData
	for _, chart := range charts.([]models.ChartData) {
		gqlChart := &gqlmodel.ChartData{
			ChartID: chart.ChartID,
			Data:    t.ChartPoints2Gql(chart.Data),
		}
		chartData = append(chartData, gqlChart)
	}
	r.logger.Debugf("returning %d charts", len(chartData))
	res := gqlmodel.ChartDataTimestamp{
		Timestamp: time.Now().UnixMilli(),
		ChartData: chartData,
	}
	return &res, nil
}

// Settings is the resolver for the settings field.
func (r *queryResolver) Settings(_ context.Context) (*gqlmodel.Settings, error) {
	settings := r.s.GetSettings()

	return &gqlmodel.Settings{
		NumPlotsPerChart: int32(settings.NumPlots),
		NumPoints:        int32(settings.NumPoints),
		PollInterval:     int32(settings.PollInterval),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
