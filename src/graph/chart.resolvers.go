package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"github.com/patostickar/go-server-data-viz/src/config"
	"github.com/patostickar/go-server-data-viz/src/models"

	gqlmodel "github.com/patostickar/go-server-data-viz/src/graph/model"
)

// GetCharts is the resolver for the getCharts field.
func (r *queryResolver) GetCharts(_ context.Context) ([]*gqlmodel.ChartData, error) {
	charts, err := r.s.Store.Read(config.ChartsKey)
	if err != nil {
		return nil, err
	}

	var gqlCharts []*gqlmodel.ChartData
	for _, chart := range charts.([]models.ChartData) {
		gqlChart := &gqlmodel.ChartData{
			ChartID: chart.ChartID,
			Data:    convertChartPoints(chart.Data),
		}
		gqlCharts = append(gqlCharts, gqlChart)
	}

	return gqlCharts, nil
}

func convertChartPoints(storePoints []models.ChartPoint) []*gqlmodel.ChartPoint {
	var gqlPoints []*gqlmodel.ChartPoint
	for _, point := range storePoints {
		gqlPoint := &gqlmodel.ChartPoint{
			Timestamp: point.Timestamp,
			Values:    convertValues(point.Values),
		}
		gqlPoints = append(gqlPoints, gqlPoint)
	}
	return gqlPoints
}

func convertValues(values map[string]float64) []*gqlmodel.KeyValuePair {
	var keyValuePairs []*gqlmodel.KeyValuePair
	for key, value := range values {
		keyValuePairs = append(keyValuePairs, &gqlmodel.KeyValuePair{
			Key:   key,
			Value: value,
		})
	}
	return keyValuePairs
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
