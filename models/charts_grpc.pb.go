// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: charts.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChartServiceClient is the client API for ChartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChartServiceClient interface {
	GetChartData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChartDataList, error)
}

type chartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChartServiceClient(cc grpc.ClientConnInterface) ChartServiceClient {
	return &chartServiceClient{cc}
}

func (c *chartServiceClient) GetChartData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChartDataList, error) {
	out := new(ChartDataList)
	err := c.cc.Invoke(ctx, "/charts.ChartService/GetChartData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartServiceServer is the server API for ChartService service.
// All implementations must embed UnimplementedChartServiceServer
// for forward compatibility
type ChartServiceServer interface {
	GetChartData(context.Context, *emptypb.Empty) (*ChartDataList, error)
	mustEmbedUnimplementedChartServiceServer()
}

// UnimplementedChartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChartServiceServer struct {
}

func (UnimplementedChartServiceServer) GetChartData(context.Context, *emptypb.Empty) (*ChartDataList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChartData not implemented")
}
func (UnimplementedChartServiceServer) mustEmbedUnimplementedChartServiceServer() {}

// UnsafeChartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChartServiceServer will
// result in compilation errors.
type UnsafeChartServiceServer interface {
	mustEmbedUnimplementedChartServiceServer()
}

func RegisterChartServiceServer(s grpc.ServiceRegistrar, srv ChartServiceServer) {
	s.RegisterService(&ChartService_ServiceDesc, srv)
}

func _ChartService_GetChartData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).GetChartData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charts.ChartService/GetChartData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).GetChartData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ChartService_ServiceDesc is the grpc.ServiceDesc for ChartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "charts.ChartService",
	HandlerType: (*ChartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChartData",
			Handler:    _ChartService_GetChartData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "charts.proto",
}
